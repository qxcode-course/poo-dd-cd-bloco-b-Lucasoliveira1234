{
    "patches": [
        {
            "label": "2025-10-28_15-08-35",
            "content": "@@ -87,264 +87,4 @@\n     \n-self.__calibre = calibre%0A        self.__dureza = dureza%0A        self.__tamanho = tamanho%0A%0A    def get_calibre(self):%0A        return self.__calibre%0A%0A    def get_dureza(self):%0A        return self.__dureza%0A%0A    def get_tamanho(self):%0A        return self.__tamanho\n",
            "lines": "3"
        },
        {
            "label": "2025-10-28_15-18-16",
            "content": "@@ -347,267 +347,4 @@\n anho\n-%0A    %0A    def set_tamanho(self, valor: int):%0A        self.__tamanho = valor%0A%0A    def gasto_por_folha(self):%0A        gastos = %7B%0A            %22HB%22: 1,%0A            %222B%22: 2,%0A            %224B%22: 4,%0A            %226B%22: 6%0A        %7D%0A        return gastos.get(self.__dureza, 0)\n",
            "lines": "14"
        },
        {
            "label": "2025-10-28_15-28-07",
            "content": "@@ -610,225 +610,4 @@\n , 0)\n-%0A    %0A    def __str__(self):%0A        return f%22%7Bself.__calibre:.1f%7D:%7Bself.__dureza%7D:%7Bself.__tamanho%7D%22%0A%0Aclass Lapiseira:%0A    def __init__(self, calibre: float):%0A        self.__calibre = calibre%0A        self.__grafite = None\n",
            "lines": "26"
        },
        {
            "label": "2025-10-28_15-41-14",
            "content": "@@ -831,132 +831,4 @@\n None\n-%0A%0A    def get_calibre(self):%0A        return self.__calibre%0A%0A    def tem_grafite(self):%0A        return self.__grafite is not None\n",
            "lines": "34"
        },
        {
            "label": "2025-10-28_15-46-37",
            "content": "@@ -959,298 +959,4 @@\n None\n-%0A    %0A    def inserir(self, grafite: Grafite):%0A        if grafite.get_calibre() != self.__calibre:%0A            print(%22fail: calibre incompativel%22)%0A            return%0A        if self.tem_grafite():%0A            print(%22fail: ja existe grafite%22)%0A            return%0A        self.__grafite = grafite%0A\n",
            "lines": "40"
        },
        {
            "label": "2025-10-28_15-52-37",
            "content": "@@ -1253,806 +1253,4 @@\n ite%0A\n-%0A    def remover(self):%0A        if not self.tem_grafite():%0A            print(%22fail: nao existe grafite%22)%0A            return None%0A        grafite_removido = self.__grafite%0A        self.__grafite = None%0A        return grafite_removido%0A    %0A    def escrever(self):%0A        if not self.tem_grafite():%0A            print(%22fail: nao existe grafite%22)%0A            return%0A%0A        grafite = self.__grafite%0A        tamanho = grafite.get_tamanho()%0A%0A        if tamanho %3C= 10:%0A            print(%22fail: tamanho insuficiente%22)%0A            return%0A        %0A        gasto = grafite.gasto_por_folha()%0A        tamanho_final = tamanho - gasto%0A%0A        if tamanho_final %3C 10:%0A            grafite.set_tamanho(10)%0A            print(%22fail: folha incompleta%22)%0A            return%0A%0A        grafite.set_tamanho(tamanho_final)%0A%0A    %0A\n",
            "lines": "49"
        },
        {
            "label": "2025-10-28_16-09-07",
            "content": "@@ -2054,216 +2054,5 @@\n     \n-def __str__(self):%0A        if self.tem_grafite():%0A            return f%22calibre: %7Bself.__calibre:.1f%7D, grafite: %5B%7Bself.__grafite%7D%5D%22%0A        else:%0A            return f%22calibre: %7Bself.__calibre:.1f%7D, grafite: null%22\n %0A\n",
            "lines": "81"
        },
        {
            "label": "2025-10-28_16-11-31",
            "content": "@@ -2266,141 +2266,4 @@\n ll%22%0A\n-        %0Adef main():%0A    lapiseira = None%0A%0A    while True:%0A        line = input()%0A        print(f%22$%7Bline%7D%22)%0A        args = line.split()%0A%0A\n",
            "lines": "85"
        },
        {
            "label": "2025-10-28_16-14-28",
            "content": "@@ -2403,166 +2403,4 @@\n ()%0A%0A\n-        if args%5B0%5D == %22end%22:%0A            break%0A%0A        elif args%5B0%5D == %22init%22:%0A            calibre = float(args%5B1%5D)%0A            lapiseira = Lapiseira(calibre)%0A%0A%0A\n",
            "lines": "94"
        },
        {
            "label": "2025-10-28_16-19-53",
            "content": "@@ -2564,177 +2564,5 @@\n e)%0A%0A\n-        elif args%5B0%5D == %22show%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A            else:%0A                print(lapiseira)%0A%0A\n %0A\n",
            "lines": "102"
        },
        {
            "label": "2025-10-28_16-20-43",
            "content": "@@ -2736,153 +2736,5 @@\n a)%0A%0A\n-        elif args%5B0%5D == %22insert%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A                continue%0A%0A\n %0A\n",
            "lines": "108"
        },
        {
            "label": "2025-10-28_16-25-24",
            "content": "@@ -2884,202 +2884,5 @@\n ue%0A%0A\n-            calibre = float(args%5B1%5D)%0A            dureza = args%5B2%5D%0A            tamanho = int(args%5B3%5D)%0A            grafite = Grafite(calibre, dureza, tamanho)%0A            lapiseira.inserir(grafite)%0A%0A\n %0A\n",
            "lines": "113"
        },
        {
            "label": "2025-10-28_16-26-35",
            "content": "@@ -3081,431 +3081,5 @@\n e)%0A%0A\n-        elif args%5B0%5D == %22remove%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A                continue%0A            lapiseira.remover()%0A%0A        elif args%5B0%5D == %22write%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A                continue%0A            lapiseira.escrever()%0A%0A        else:%0A            print(%22fail: comando invalido%22)%0A%0Amain()%0A\n %0A\n",
            "lines": "119"
        },
        {
            "label": "2025-10-28_16-29-30",
            "content": "class Grafite:\n    def __init__(self, calibre: float, dureza: str, tamanho: int):\n        self.__calibre = calibre\n        self.__dureza = dureza\n        self.__tamanho = tamanho\n\n    def get_calibre(self):\n        return self.__calibre\n\n    def get_dureza(self):\n        return self.__dureza\n\n    def get_tamanho(self):\n        return self.__tamanho\n    \n    def set_tamanho(self, valor: int):\n        self.__tamanho = valor\n\n    def gasto_por_folha(self):\n        gastos = {\n            \"HB\": 1,\n            \"2B\": 2,\n            \"4B\": 4,\n            \"6B\": 6\n        }\n        return gastos.get(self.__dureza, 0)\n    \n    def __str__(self):\n        return f\"{self.__calibre:.1f}:{self.__dureza}:{self.__tamanho}\"\n\nclass Lapiseira:\n    def __init__(self, calibre: float):\n        self.__calibre = calibre\n        self.__grafite = None\n\n    def get_calibre(self):\n        return self.__calibre\n\n    def tem_grafite(self):\n        return self.__grafite is not None\n    \n    def inserir(self, grafite: Grafite):\n        if grafite.get_calibre() != self.__calibre:\n            print(\"fail: calibre incompativel\")\n            return\n        if self.tem_grafite():\n            print(\"fail: ja existe grafite\")\n            return\n        self.__grafite = grafite\n\n    def remover(self):\n        if not self.tem_grafite():\n            print(\"fail: nao existe grafite\")\n            return None\n        grafite_removido = self.__grafite\n        self.__grafite = None\n        return grafite_removido\n    \n    def escrever(self):\n        if not self.tem_grafite():\n            print(\"fail: nao existe grafite\")\n            return\n\n        grafite = self.__grafite\n        tamanho = grafite.get_tamanho()\n\n        if tamanho <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n        \n        gasto = grafite.gasto_por_folha()\n        tamanho_final = tamanho - gasto\n\n        if tamanho_final < 10:\n            grafite.set_tamanho(10)\n            print(\"fail: folha incompleta\")\n            return\n\n        grafite.set_tamanho(tamanho_final)\n\n    def __str__(self):\n        if self.tem_grafite():\n            return f\"calibre: {self.__calibre:.1f}, grafite: [{self.__grafite}]\"\n        else:\n            return f\"calibre: {self.__calibre:.1f}, grafite: null\"\n        \ndef main():\n    lapiseira = None\n\n    while True:\n        line = input()\n        print(f\"${line}\")\n        args = line.split()\n\n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"init\":\n            calibre = float(args[1])\n            lapiseira = Lapiseira(calibre)\n\n        elif args[0] == \"show\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n            else:\n                print(lapiseira)\n\n        elif args[0] == \"insert\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n                continue\n\n            calibre = float(args[1])\n            dureza = args[2]\n            tamanho = int(args[3])\n            grafite = Grafite(calibre, dureza, tamanho)\n            lapiseira.inserir(grafite)\n\n        elif args[0] == \"remove\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n                continue\n            lapiseira.remover()\n\n        elif args[0] == \"write\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n                continue\n            lapiseira.escrever()\n\n        else:\n            print(\"fail: comando invalido\")\n\nmain()\n\n",
            "lines": "135"
        }
    ]
}